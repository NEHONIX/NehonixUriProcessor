 static isValidUrl(
    url: string,
    options: UrlValidationOptions = {
      strictMode: false,
      allowUnicodeEscapes: true,
      rejectDuplicateParams: true,
      httpsOnly: false,
      maxUrlLength: 2048,
      allowedTLDs: [],
      allowedProtocols: ["http", "https"],
      requireProtocol: false,
      requirePathOrQuery: false,
      strictParamEncoding: false,
    }
  ): boolean {
    // Check URL length if maximum is set
    if (options.maxUrlLength && url.length > options.maxUrlLength)
      if (options.maxUrlLength > 0 && url.length > options.maxUrlLength) {
        console.log("Maximum length ERR");
        return false;
      }

    // Check if URL is empty
    if (!url.trim()) {
      return false;
    }

    try {
      // Handle protocol requirements
      let parsedUrl = url;
      const hasProtocol = /^[a-z][a-z0-9+.-]*:\/\//i.test(url);

      if (!hasProtocol) {
        if (options.requireProtocol) {
          return false; // Protocol required but not provided
        }
        parsedUrl = "https://" + url;
      }

      // Parse the URL
      const urlObj = new URL(parsedUrl);
      const analysedUri = sr.analyzeURL(urlObj.href);

      // Protocol validation
      const protocol = urlObj.protocol.replace(":", "");
      if (options.allowedProtocols)
        if (
          options.allowedProtocols.length > 0 &&
          !options.allowedProtocols.includes(protocol)
        ) {
          return false;
        }

      // HTTPS-only validation
      if (options.httpsOnly && protocol !== "https") {
        return false;
      }

      // Domain validation
      const hostParts = urlObj.hostname.split(".");
      if (hostParts.length < 2 || hostParts.some((part) => part === "")) {
        return false;
      }

      // TLD validation
      if (options.allowedTLDs)
        if (options.allowedTLDs.length > 0) {
          const tld = hostParts[hostParts.length - 1].toLowerCase();
          if (!options.allowedTLDs.includes(tld)) {
            return false;
          }
        }

      // Path/query requirement validation
      if (
        options.requirePathOrQuery &&
        urlObj.pathname === "/" &&
        !urlObj.search
      ) {
        return false;
      }

      // Strict mode path validation
      if (options.strictMode && urlObj.pathname === "/" && urlObj.search) {
        return false; // In strict mode, query params must have a leading slash path
      }

      // Check for unencoded spaces in the query string
      if (urlObj.search.includes(" ")) {
        return false;
      }

      // Strict parameter encoding validation
      if (options.strictParamEncoding && urlObj.search) {
        const rawQuery = urlObj.search.substring(1);
        const params = rawQuery.split("&");

        for (const param of params) {
          if (param.includes("=")) {
            const [key, value] = param.split("=", 2);

            // Check if properly encoded
            try {
              const decodedKey = decodeURIComponent(key);
              const reEncodedKey = encodeURIComponent(decodedKey);

              if (key !== reEncodedKey && !key.includes("+")) {
                return false; // Key is not properly encoded
              }

              if (value) {
                const decodedValue = decodeURIComponent(value);
                const reEncodedValue = encodeURIComponent(decodedValue);

                if (value !== reEncodedValue && !value.includes("+")) {
                  return false; // Value is not properly encoded
                }
              }
            } catch {
              return false; // Malformed percent encoding
            }
          }
        }
      }

      // Check for duplicate query parameters
      let duplicatedState = this.detectDuplicatedValues(urlObj.href);

      if (options.rejectDuplicatedValues) {
        if (duplicatedState.duplicatedValues.length > 0) {
          console.warn("Duplicated values found in URI");
          return false;
        }
      }

      if (options.rejectDuplicateParams) {
        if (duplicatedState.duplicatedKeys.length > 0) {
          console.warn("Duplicated keys found in URI");
          return false;
        }
      }

      // Unicode escape validation
      if (!options.allowUnicodeEscapes) {
        const hasUnicodeEscapes = /\\u[\da-f]{4}/i.test(url);
        if (hasUnicodeEscapes) {
          return false;
        }
      }

      return true;
    } catch (error) {
      return false; // Any parsing error means invalid URL
    }
  }